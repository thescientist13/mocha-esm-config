diff --git a/node_modules/mocha/bin/mocha.js b/node_modules/mocha/bin/mocha.js
index fb58e65..4db02f9 100755
--- a/node_modules/mocha/bin/mocha.js
+++ b/node_modules/mocha/bin/mocha.js
@@ -24,119 +24,121 @@ const mochaArgs = {};
 const nodeArgs = {};
 let hasInspect = false;
 
-const opts = loadOptions(process.argv.slice(2));
-debug('loaded opts', opts);
-
-/**
- * Given option/command `value`, disable timeouts if applicable
- * @param {string} [value] - Value to check
- * @ignore
- */
-const disableTimeouts = value => {
-  if (impliesNoTimeouts(value)) {
-    debug('option %s disabled timeouts', value);
-    mochaArgs.timeout = 0;
-  }
-};
-
-/**
- * If `value` begins with `v8-` and is not explicitly `v8-options`, remove prefix
- * @param {string} [value] - Value to check
- * @returns {string} `value` with prefix (maybe) removed
- * @ignore
- */
-const trimV8Option = value =>
-  value !== 'v8-options' && /^v8-/.test(value) ? value.slice(3) : value;
+(async() => {
+  const opts = await loadOptions(process.argv.slice(2));
+  debug('loaded opts', opts);
+  
+  /**
+   * Given option/command `value`, disable timeouts if applicable
+   * @param {string} [value] - Value to check
+   * @ignore
+   */
+  const disableTimeouts = value => {
+    if (impliesNoTimeouts(value)) {
+      debug('option %s disabled timeouts', value);
+      mochaArgs.timeout = 0;
+    }
+  };
+  
+  /**
+   * If `value` begins with `v8-` and is not explicitly `v8-options`, remove prefix
+   * @param {string} [value] - Value to check
+   * @returns {string} `value` with prefix (maybe) removed
+   * @ignore
+   */
+  const trimV8Option = value =>
+    value !== 'v8-options' && /^v8-/.test(value) ? value.slice(3) : value;
+  
+  // sort options into "node" and "mocha" buckets
+  Object.keys(opts).forEach(opt => {
+    if (isNodeFlag(opt)) {
+      nodeArgs[trimV8Option(opt)] = opts[opt];
+    } else {
+      mochaArgs[opt] = opts[opt];
+    }
+  });
   
-// sort options into "node" and "mocha" buckets
-Object.keys(opts).forEach(opt => {
-  if (isNodeFlag(opt)) {
-    nodeArgs[trimV8Option(opt)] = opts[opt];
-  } else {
-    mochaArgs[opt] = opts[opt];
-  }
-});
-
-// disable 'timeout' for debugFlags
-Object.keys(nodeArgs).forEach(opt => disableTimeouts(opt));
-mochaArgs['node-option'] &&
-  mochaArgs['node-option'].forEach(opt => disableTimeouts(opt));
-
-// Native debugger handling
-// see https://nodejs.org/api/debugger.html#debugger_debugger
-// look for 'inspect' that would launch this debugger,
-// remove it from Mocha's opts and prepend it to Node's opts.
-// A deprecation warning will be printed by node, if applicable.
-// (mochaArgs._ are "positional" arguments, not prefixed with - or --)
-if (mochaArgs._) {
-  const i = mochaArgs._.findIndex(val => val === 'inspect');
-  if (i > -1) {
-    mochaArgs._.splice(i, 1);
-    disableTimeouts('inspect');
-    hasInspect = true;
+  // disable 'timeout' for debugFlags
+  Object.keys(nodeArgs).forEach(opt => disableTimeouts(opt));
+  mochaArgs['node-option'] &&
+    mochaArgs['node-option'].forEach(opt => disableTimeouts(opt));
+  
+  // Native debugger handling
+  // see https://nodejs.org/api/debugger.html#debugger_debugger
+  // look for 'inspect' that would launch this debugger,
+  // remove it from Mocha's opts and prepend it to Node's opts.
+  // A deprecation warning will be printed by node, if applicable.
+  // (mochaArgs._ are "positional" arguments, not prefixed with - or --)
+  if (mochaArgs._) {
+    const i = mochaArgs._.findIndex(val => val === 'inspect');
+    if (i > -1) {
+      mochaArgs._.splice(i, 1);
+      disableTimeouts('inspect');
+      hasInspect = true;
+    }
   }
-}
   
-if (mochaArgs['node-option'] || Object.keys(nodeArgs).length || hasInspect) {
-  const {spawn} = require('child_process');
-  const mochaPath = require.resolve('../lib/cli/cli.js');
+  if (mochaArgs['node-option'] || Object.keys(nodeArgs).length || hasInspect) {
+    const {spawn} = require('child_process');
+    const mochaPath = require.resolve('../lib/cli/cli.js');
   
-  const nodeArgv =
-    (mochaArgs['node-option'] && mochaArgs['node-option'].map(v => '--' + v)) ||
-    unparseNodeFlags(nodeArgs);
+    const nodeArgv =
+      (mochaArgs['node-option'] && mochaArgs['node-option'].map(v => '--' + v)) ||
+      unparseNodeFlags(nodeArgs);
   
-  if (hasInspect) nodeArgv.unshift('inspect');
-  delete mochaArgs['node-option'];
+    if (hasInspect) nodeArgv.unshift('inspect');
+    delete mochaArgs['node-option'];
   
-  debug('final node argv', nodeArgv);
+    debug('final node argv', nodeArgv);
   
-  const args = [].concat(
-    nodeArgv,
-    mochaPath,
-    unparse(mochaArgs, {alias: aliases})
-  );
+    const args = [].concat(
+      nodeArgv,
+      mochaPath,
+      unparse(mochaArgs, {alias: aliases})
+    );
   
-  debug(
-    'forking child process via command: %s %s',
-    process.execPath,
-    args.join(' ')
-  );
+    debug(
+      'forking child process via command: %s %s',
+      process.execPath,
+      args.join(' ')
+    );
   
-  const proc = spawn(process.execPath, args, {
-    stdio: 'inherit'
-  });
+    const proc = spawn(process.execPath, args, {
+      stdio: 'inherit'
+    });
   
-  proc.on('exit', (code, signal) => {
-    process.on('exit', () => {
-      if (signal) {
-        process.kill(process.pid, signal);
-      } else {
-        process.exit(code);
-      }
+    proc.on('exit', (code, signal) => {
+      process.on('exit', () => {
+        if (signal) {
+          process.kill(process.pid, signal);
+        } else {
+          process.exit(code);
+        }
+      });
     });
-  });
   
-  // terminate children.
-  process.on('SIGINT', () => {
-    // XXX: a previous comment said this would abort the runner, but I can't see that it does
-    // anything with the default runner.
-    debug('main process caught SIGINT');
-    proc.kill('SIGINT');
-    // if running in parallel mode, we will have a proper SIGINT handler, so the below won't
-    // be needed.
-    if (!args.parallel || args.jobs < 2) {
-      // win32 does not support SIGTERM, so use next best thing.
-      if (require('os').platform() === 'win32') {
-        proc.kill('SIGKILL');
-      } else {
-        // using SIGKILL won't cleanly close the output streams, which can result
-        // in cut-off text or a befouled terminal.
-        debug('sending SIGTERM to child process');
-        proc.kill('SIGTERM');
+    // terminate children.
+    process.on('SIGINT', () => {
+      // XXX: a previous comment said this would abort the runner, but I can't see that it does
+      // anything with the default runner.
+      debug('main process caught SIGINT');
+      proc.kill('SIGINT');
+      // if running in parallel mode, we will have a proper SIGINT handler, so the below won't
+      // be needed.
+      if (!args.parallel || args.jobs < 2) {
+        // win32 does not support SIGTERM, so use next best thing.
+        if (require('os').platform() === 'win32') {
+          proc.kill('SIGKILL');
+        } else {
+          // using SIGKILL won't cleanly close the output streams, which can result
+          // in cut-off text or a befouled terminal.
+          debug('sending SIGTERM to child process');
+          proc.kill('SIGTERM');
+        }
       }
-    }
-  });
-} else {
-  debug('running Mocha in-process');
-  require('../lib/cli/cli').main([], mochaArgs);
-}
+    });
+  } else {
+    debug('running Mocha in-process');
+    require('../lib/cli/cli').main([], mochaArgs);
+  }
+})()
diff --git a/node_modules/mocha/lib/cli/cli.js b/node_modules/mocha/lib/cli/cli.js
index 977a341..c60e2f1 100755
--- a/node_modules/mocha/lib/cli/cli.js
+++ b/node_modules/mocha/lib/cli/cli.js
@@ -35,7 +35,7 @@ const {cwd} = require('../utils');
  * @param {string[]} argv - Array of arguments to parse, or by default the lovely `process.argv.slice(2)`
  * @param {object} [mochaArgs] - Object of already parsed Mocha arguments (by bin/mocha)
  */
-exports.main = (argv = process.argv.slice(2), mochaArgs) => {
+exports.main = async (argv = process.argv.slice(2), mochaArgs) => {
   debug('entered main with raw args', argv);
   // ensure we can require() from current working directory
   if (typeof module.paths !== 'undefined') {
@@ -44,7 +44,7 @@ exports.main = (argv = process.argv.slice(2), mochaArgs) => {
 
   Error.stackTraceLimit = Infinity; // configurable via --stack-trace-limit?
 
-  var args = mochaArgs || loadOptions(argv);
+  var args = mochaArgs || await loadOptions(argv);
 
   yargs()
     .scriptName('mocha')
diff --git a/node_modules/mocha/lib/cli/config.js b/node_modules/mocha/lib/cli/config.js
index ac71983..1997c67 100644
--- a/node_modules/mocha/lib/cli/config.js
+++ b/node_modules/mocha/lib/cli/config.js
@@ -13,6 +13,7 @@ const debug = require('debug')('mocha:cli:config');
 const findUp = require('find-up');
 const {createUnparsableFileError} = require('../errors');
 const utils = require('../utils');
+const { pathToFileURL } = require('url');
 
 /**
  * These are the valid config files, in order of precedence;
@@ -22,6 +23,7 @@ const utils = require('../utils');
  * @private
  */
 exports.CONFIG_FILES = [
+  '.mocharc.mjs',
   '.mocharc.cjs',
   '.mocharc.js',
   '.mocharc.yaml',
@@ -53,6 +55,11 @@ const parsers = (exports.parsers = {
     JSON.parse(
       require('strip-json-comments')(fs.readFileSync(filepath, 'utf8'))
     )
+  ,
+  esm: async filepath => {
+    console.log('ESM config file =>', { filepath });
+    return (await import(pathToFileURL(filepath))).default;
+  }
 });
 
 /**
@@ -60,17 +67,23 @@ const parsers = (exports.parsers = {
  * "JSON" files may have comments.
  *
  * @private
+ * @async
  * @param {string} filepath - Config file path to load
  * @returns {Object} Parsed config object
  */
-exports.loadConfig = filepath => {
+exports.loadConfig = async filepath => {
   let config = {};
   debug('loadConfig: trying to parse config at %s', filepath);
-
+  // TODO do we need to check this exists first?
+  const packageJson = require(path.resolve(utils.cwd(), 'package.json'));
   const ext = path.extname(filepath);
   try {
     if (ext === '.yml' || ext === '.yaml') {
       config = parsers.yaml(filepath);
+    } else if (ext === '.mjs') {
+      config = await parsers.esm(filepath);
+    } else if (ext === '.js' && packageJson.type === 'module') {
+      config = await parsers.esm(filepath);
     } else if (ext === '.js' || ext === '.cjs') {
       config = parsers.js(filepath);
     } else {
@@ -82,6 +95,8 @@ exports.loadConfig = filepath => {
       filepath
     );
   }
+
+  console.log({ config });
   return config;
 };
 
diff --git a/node_modules/mocha/lib/cli/options.js b/node_modules/mocha/lib/cli/options.js
index 8fa9470..30dfd20 100644
--- a/node_modules/mocha/lib/cli/options.js
+++ b/node_modules/mocha/lib/cli/options.js
@@ -153,13 +153,14 @@ const parse = (args = [], defaultValues = {}, ...configObjects) => {
  * @param {Object} [args] - Arguments object
  * @param {string|boolean} [args.config] - Path to config file or `false` to skip
  * @public
+ * @async
  * @alias module:lib/cli.loadRc
  * @returns {external:yargsParser.Arguments|void} Parsed config, or nothing if `args.config` is `false`
  */
-const loadRc = (args = {}) => {
+const loadRc = async (args = {}) => {
   if (args.config !== false) {
     const config = args.config || findConfig();
-    return config ? loadConfig(config) : {};
+    return config ? await loadConfig(config) : {};
   }
 };
 
@@ -216,10 +217,11 @@ module.exports.loadPkgRc = loadPkgRc;
  * @summary Parses options read from `.mocharc.*` and `package.json`.
  * @param {string|string[]} [argv] - Arguments to parse
  * @public
+ * @async
  * @alias module:lib/cli.loadOptions
  * @returns {external:yargsParser.Arguments} Parsed args from everything
  */
-const loadOptions = (argv = []) => {
+const loadOptions = async (argv = []) => {
   let args = parse(argv);
   // short-circuit: look for a flag that would abort loading of options
   if (
@@ -231,7 +233,7 @@ const loadOptions = (argv = []) => {
     return args;
   }
 
-  const rcConfig = loadRc(args);
+  const rcConfig = await loadRc(args);
   const pkgConfig = loadPkgRc(args);
 
   if (rcConfig) {
